/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 14 14:06:14 GMT 2018
 */

package weiss.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import weiss.util.ArrayList;
import weiss.util.Collection;
import weiss.util.Collections;
import weiss.util.Comparator;
import weiss.util.SortedSet;
import weiss.util.TreeSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCollection_ESTest extends AbstractCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TreeSet<Object> treeSet1 = new TreeSet<Object>();
      treeSet1.add("[ ]");
      boolean boolean0 = treeSet1.equals(treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.remove(0);
      boolean boolean0 = arrayList0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<TreeSet<Object>> treeSet0 = new TreeSet<TreeSet<Object>>((Comparator<? super TreeSet<Object>>) null);
      treeSet0.clear();
      assertEquals(0, treeSet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(1);
      boolean boolean0 = treeSet0.add(integer0);
      boolean boolean1 = treeSet0.remove(integer0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = treeSet0.remove("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(1);
      treeSet0.add(integer0);
      boolean boolean0 = treeSet0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(1);
      boolean boolean0 = treeSet0.add(integer0);
      boolean boolean1 = treeSet0.add(integer0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = arrayList0.subList(79, (-3179));
      // Undeclared exception!
      try { 
        arrayList1.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        treeSet0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(2090);
      treeSet0.add(integer0);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        treeSet0.toArray((Object[]) stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("weiss.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.remove(0);
      // Undeclared exception!
      try { 
        arrayList0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Comparable<Object>> arrayList0 = new ArrayList<Comparable<Object>>();
      ArrayList<Comparable<Object>> arrayList1 = arrayList0.subList(0, 0);
      // Undeclared exception!
      try { 
        arrayList1.remove((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("");
      // Undeclared exception!
      try { 
        treeSet0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("/Xg:HvI4w");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        treeSet0.remove(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("weiss.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<TreeSet<Object>> arrayList0 = new ArrayList<TreeSet<Object>>();
      arrayList0.remove(0);
      // Undeclared exception!
      try { 
        arrayList0.hashCode();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      ArrayList<String> arrayList0 = new ArrayList<String>(treeSet0);
      arrayList0.iterator();
      int int0 = 0;
      ArrayList<String> arrayList1 = arrayList0.subList(0, 0);
      treeSet0.contains(arrayList0);
      arrayList1.toString();
      ArrayList<Integer>[] arrayListArray0 = (ArrayList<Integer>[]) Array.newInstance(ArrayList.class, 0);
      arrayList1.toArray(arrayListArray0);
      ArrayList<ArrayList<Object>> arrayList2 = new ArrayList<ArrayList<Object>>();
      arrayList2.listIterator(int0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      treeSet0.hashCode();
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>(comparator1);
      ArrayList<Object> arrayList3 = new ArrayList<Object>(treeSet1);
      arrayList3.clear();
      ArrayList<Comparable<String>> arrayList4 = new ArrayList<Comparable<String>>(treeSet0);
      ArrayList<Comparable<String>>[] arrayListArray1 = (ArrayList<Comparable<String>>[]) Array.newInstance(ArrayList.class, 6);
      arrayListArray1[0] = arrayList4;
      arrayListArray1[1] = arrayList4;
      arrayListArray1[2] = arrayList4;
      arrayListArray1[3] = arrayList4;
      arrayListArray1[4] = arrayList4;
      arrayListArray1[5] = arrayList4;
      arrayList4.toArray(arrayListArray1);
      int int1 = (-1145);
      // Undeclared exception!
      try { 
        arrayList4.get(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1145; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        treeSet0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = arrayList0.subList(1534, (-3250));
      // Undeclared exception!
      try { 
        arrayList1.contains(arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = arrayList0.subList(0, (-1865));
      // Undeclared exception!
      try { 
        arrayList1.add((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = Integer.getInteger("'i2JwMt)AdYoHd/^");
      treeSet0.add((Integer) null);
      // Undeclared exception!
      try { 
        treeSet0.add(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSet0.add((Integer) null);
      TreeSet<Object> treeSet1 = new TreeSet<Object>((Collection<?>) treeSet0);
      // Undeclared exception!
      try { 
        treeSet1.add(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weiss.util.TreeSet cannot be cast to java.lang.Comparable
         //
         verifyException("weiss.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Comparable<Object>> arrayList0 = new ArrayList<Comparable<Object>>();
      Comparable<Object> comparable0 = arrayList0.remove(0);
      // Undeclared exception!
      try { 
        arrayList0.add(comparable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Collections.DefaultComparator<String> collections_DefaultComparator0 = new Collections.DefaultComparator<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>(collections_DefaultComparator0);
      treeSet0.add("");
      boolean boolean0 = treeSet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Collections.DefaultComparator<String> collections_DefaultComparator0 = new Collections.DefaultComparator<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>(collections_DefaultComparator0);
      boolean boolean0 = treeSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Comparable<Object>> treeSet0 = new TreeSet<Comparable<Object>>(comparator0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("_e1qB~inDl&.").when(comparable0).toString();
      treeSet0.add(comparable0);
      String string0 = treeSet0.toString();
      assertEquals("[ _e1qB~inDl&. ]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSet0.add((Integer) null);
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>((Collection<? extends Integer>) treeSet0);
      boolean boolean0 = treeSet1.equals(treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSet0.add((Integer) null);
      treeSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add(treeSet0);
      arrayList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Comparable<Object>> treeSet0 = new TreeSet<Comparable<Object>>(comparator0);
      TreeSet<Comparable<Object>> treeSet1 = new TreeSet<Comparable<Object>>((SortedSet<Comparable<Object>>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      treeSet0.add(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      treeSet1.add(comparable1);
      boolean boolean0 = treeSet1.equals(treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0);
      boolean boolean0 = treeSet0.equals("j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      boolean boolean0 = treeSet0.equals(treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Collections.DefaultComparator<String> collections_DefaultComparator0 = new Collections.DefaultComparator<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>(collections_DefaultComparator0);
      TreeSet<String> treeSet1 = new TreeSet<String>((Collection<? extends String>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      treeSet0.add("");
      boolean boolean0 = treeSet1.equals(treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Object[] objectArray0 = treeSet0.toArray();
      ArrayList<Comparable<Object>> arrayList0 = new ArrayList<Comparable<Object>>();
      Object[] objectArray1 = arrayList0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      String[] stringArray0 = new String[9];
      Object[] objectArray0 = treeSet0.toArray((Object[]) stringArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSet0.add((Integer) null);
      Object[] objectArray0 = treeSet0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeSet<ArrayList<Object>> treeSet0 = new TreeSet<ArrayList<Object>>();
      Object[] objectArray0 = treeSet0.toArray();
      TreeSet<String> treeSet1 = new TreeSet<String>();
      treeSet1.add(">ec;q");
      Object[] objectArray1 = treeSet1.toArray(objectArray0);
      assertEquals(1, objectArray1.length);
  }
}
