/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 14 14:12:23 GMT 2018
 */

package weiss.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import weiss.util.Collections;
import weiss.util.Comparator;
import weiss.util.Iterator;
import weiss.util.Map;
import weiss.util.Set;
import weiss.util.TreeMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TreeMap_ESTest extends TreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Collections.DefaultComparator<Integer> collections_DefaultComparator0 = new Collections.DefaultComparator<Integer>();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>(collections_DefaultComparator0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeMap<Comparable<String>, Comparable<Object>> treeMap0 = new TreeMap<Comparable<String>, Comparable<Object>>();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Collections.DefaultComparator<Integer> collections_DefaultComparator0 = new Collections.DefaultComparator<Integer>();
      TreeMap<Integer, Comparable<Object>> treeMap0 = new TreeMap<Integer, Comparable<Object>>(collections_DefaultComparator0);
      Comparator<? super Integer> comparator0 = treeMap0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TreeMap<Comparable<Integer>, Comparable<Integer>> treeMap0 = new TreeMap<Comparable<Integer>, Comparable<Integer>>();
      Set<Map.Entry<Comparable<Integer>, Comparable<Integer>>> set0 = (Set<Map.Entry<Comparable<Integer>, Comparable<Integer>>>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(set0).iterator();
      // Undeclared exception!
      try { 
        treeMap0.clonePairSet(set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Map.Entry<String, Object> map_Entry0 = (Map.Entry<String, Object>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(iterator0).hasNext();
      doReturn(map_Entry0, map_Entry0).when(iterator0).next();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(set0).iterator();
      // Undeclared exception!
      try { 
        treeMap0.clonePairSet(set0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TreeMap<String, Comparable<Object>> treeMap0 = null;
      try {
        treeMap0 = new TreeMap<String, Comparable<Object>>((Map<String, Comparable<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.MapImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      Comparator<? super Object> comparator0 = treeMap0.comparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Integer, Comparable<Object>> treeMap0 = new TreeMap<Integer, Comparable<Object>>(comparator0);
      TreeMap<Integer, Comparable<Object>> treeMap1 = new TreeMap<Integer, Comparable<Object>>(treeMap0);
      assertFalse(treeMap1.equals((Object)treeMap0));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Set<Integer> set0 = treeMap0.makeEmptyKeySet();
      TreeMap<String, Object> treeMap1 = new TreeMap<String, Object>();
      Map.Entry<String, Object> map_Entry0 = treeMap1.makePair("; size ", set0);
      Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn(map_Entry0, map_Entry0).when(iterator0).next();
      Set<Map.Entry<String, Object>> set1 = (Set<Map.Entry<String, Object>>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(set1).iterator();
      treeMap1.clonePairSet(set1);
  }
}
