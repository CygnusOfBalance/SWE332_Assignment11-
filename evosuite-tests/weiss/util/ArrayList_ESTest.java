/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 14 14:07:30 GMT 2018
 */

package weiss.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import weiss.util.ArrayList;
import weiss.util.Collection;
import weiss.util.Collections;
import weiss.util.Comparator;
import weiss.util.Iterator;
import weiss.util.ListIterator;
import weiss.util.TreeSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayList_ESTest extends ArrayList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.remove(0);
      boolean boolean0 = arrayList0.remove((Object) null);
      assertEquals((-1), arrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = arrayList0.subList(0, (-988));
      // Undeclared exception!
      try { 
        arrayList1.listIterator(1941);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      ArrayList<Object> arrayList1 = arrayList0.subList(0, 0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        arrayList1.set((-3165), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3165; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = arrayList0.subList(0, 0);
      // Undeclared exception!
      try { 
        arrayList1.get(3735);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3735; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("_D~S");
      int int0 = arrayList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = arrayList0.subList(1, 0);
      int int0 = arrayList1.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-662));
      arrayList0.add(integer0);
      arrayList0.remove(0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      arrayList0.get(0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        arrayList0.remove((-3051));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3051
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.remove(0);
      // Undeclared exception!
      try { 
        arrayList0.iterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      ArrayList<Object> arrayList1 = arrayList0.subList(1996, (-2983));
      // Undeclared exception!
      try { 
        arrayList1.contains(treeSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Integer> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = arrayList0.subList(2, (-563));
      ArrayList<Object> arrayList2 = null;
      try {
        arrayList2 = new ArrayList<Object>(arrayList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.remove(0);
      // Undeclared exception!
      try { 
        arrayList0.add("YzYpj`N");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        arrayList0.set(1, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        arrayList0.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Comparable<Object>> arrayList0 = new ArrayList<Comparable<Object>>();
      int int0 = arrayList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>(arrayList0);
      Iterator<Object> iterator0 = arrayList1.iterator();
      assertFalse(iterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(treeSet0);
      arrayList0.clear();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        arrayList0.listIterator(422);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1040));
      integerArray0[0] = integer0;
      integerArray0[5] = integerArray0[0];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(treeSet0);
      // Undeclared exception!
      try { 
        arrayList0.listIterator((int) integerArray0[5]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$ArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add("");
      arrayList0.add("");
      boolean boolean0 = arrayList0.remove((Object) "");
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      Object object0 = new Object();
      arrayList0.add(object0);
      boolean boolean0 = arrayList0.contains(treeSet0);
      assertEquals(1, arrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      boolean boolean0 = arrayList0.remove((Object) null);
      assertEquals(0, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      boolean boolean0 = arrayList0.remove((Object) null);
      assertEquals(1, arrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add("");
      boolean boolean0 = arrayList0.contains("");
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("%71qR00YQ6");
      arrayList0.set(0, "gw");
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        arrayList0.set((-45), (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -45; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      arrayList0.get(0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        arrayList0.get((-712));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -712; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Collections.DefaultComparator<String> collections_DefaultComparator0 = new Collections.DefaultComparator<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>(collections_DefaultComparator0);
      ArrayList<String> arrayList0 = new ArrayList<String>(treeSet0);
      ArrayList<String> arrayList1 = arrayList0.subList(0, 0);
      boolean boolean0 = arrayList1.contains((Object) null);
      assertEquals(0, arrayList1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = arrayList0.subList(0, 0);
      // Undeclared exception!
      try { 
        arrayList1.subList(1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 1 0
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = arrayList0.subList(0, 0);
      ArrayList<Object> arrayList2 = arrayList1.subList(1, 0);
      assertEquals(0, arrayList1.size());
      assertEquals((-1), arrayList2.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      ArrayList<Comparable<Integer>> arrayList0 = new ArrayList<Comparable<Integer>>(treeSet0);
      // Undeclared exception!
      try { 
        arrayList0.subList(2, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 1 0
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Collections.DefaultComparator<Integer> collections_DefaultComparator0 = new Collections.DefaultComparator<Integer>();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(collections_DefaultComparator0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(treeSet0);
      // Undeclared exception!
      try { 
        arrayList0.subList((-648), (-986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -648 -986 0
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("[ ]");
      ArrayList<Comparable<String>> arrayList0 = new ArrayList<Comparable<String>>(treeSet0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = arrayList0.subList(0, 0);
      // Undeclared exception!
      try { 
        arrayList1.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = arrayList0.subList(0, 0);
      // Undeclared exception!
      try { 
        arrayList1.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = arrayList0.subList(1, 0);
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        arrayList1.remove((Object) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeSet<Comparable<Object>> treeSet0 = new TreeSet<Comparable<Object>>();
      ArrayList<Comparable<Object>> arrayList0 = new ArrayList<Comparable<Object>>(treeSet0);
      ArrayList<Comparable<Object>> arrayList1 = arrayList0.subList(0, 0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        arrayList1.set(0, comparable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0; size 0
         //
         verifyException("weiss.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = arrayList0.subList(0, 0);
      // Undeclared exception!
      try { 
        arrayList1.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = arrayList0.subList(0, 0);
      ListIterator<Integer> listIterator0 = arrayList1.listIterator(0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = arrayList0.subList(0, 0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        arrayList1.subList((-2666), (int) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2666 0 0
         //
         verifyException("weiss.util.ArrayList$SubList", e);
      }
  }
}
