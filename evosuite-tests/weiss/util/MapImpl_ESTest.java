/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 14 14:10:03 GMT 2018
 */

package weiss.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import weiss.util.Collection;
import weiss.util.Collections;
import weiss.util.Comparator;
import weiss.util.Map;
import weiss.util.Set;
import weiss.util.TreeMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapImpl_ESTest extends MapImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>(comparator0);
      Object object0 = new Object();
      Integer integer0 = new Integer(1549);
      treeMap0.put(object0, integer0);
      int int0 = treeMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      treeMap0.put(integer0, integer0);
      boolean boolean0 = treeMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeMap<Comparable<String>, String> treeMap0 = new TreeMap<Comparable<String>, String>((Comparator<? super Comparable<String>>) null);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(anyString());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      treeMap0.put(comparable0, "weiss.util.MapImpl$ViewClass");
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable1).compareTo(anyString());
      doReturn((String) null, (String) null).when(comparable1).toString();
      String string0 = treeMap0.get(comparable1);
      assertEquals("weiss.util.MapImpl$ViewClass", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Collections.DefaultComparator<String> collections_DefaultComparator0 = new Collections.DefaultComparator<String>();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>(collections_DefaultComparator0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)treeMap0.entrySet();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeMap<Integer, Comparable<Object>> treeMap0 = new TreeMap<Integer, Comparable<Object>>(comparator0);
      Integer integer0 = Integer.getInteger("weiss.util.MapImpl$KeySetClass", 970);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      treeMap0.put(integer0, comparable0);
      boolean boolean0 = treeMap0.containsKey(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>(comparator0);
      // Undeclared exception!
      try { 
        treeMap0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(comparator0).compare(any() , any());
      TreeMap<String, Comparable<Integer>> treeMap0 = new TreeMap<String, Comparable<Integer>>(comparator0);
      treeMap0.remove("");
      TreeMap<Object, Integer> treeMap1 = new TreeMap<Object, Integer>();
      TreeMap<Object, Integer> treeMap2 = new TreeMap<Object, Integer>(treeMap1);
      Object object0 = null;
      // Undeclared exception!
      try { 
        treeMap2.get(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeMap<Object, Comparable<String>> treeMap0 = new TreeMap<Object, Comparable<String>>();
      // Undeclared exception!
      try { 
        treeMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>(comparator0);
      TreeMap<Object, Object> treeMap1 = new TreeMap<Object, Object>(treeMap0);
      // Undeclared exception!
      try { 
        treeMap1.remove(treeMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weiss.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3757, 0).when(comparator0).compare(any() , any());
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>(comparator0);
      Integer integer0 = new Integer((-1922));
      treeMap0.put("R|o(rK6@\">)#", integer0);
      treeMap0.getSet();
      TreeMap<Object, Object> treeMap1 = new TreeMap<Object, Object>();
      treeMap1.keySet();
      int int0 = 0;
      int int1 = 0;
      Integer.max(int0, int1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap2 = new TreeMap<String, String>(comparator1);
      treeMap2.makeEmptyKeySet();
      Comparator<Object> comparator2 = null;
      TreeMap<Integer, Object> treeMap3 = new TreeMap<Integer, Object>(comparator2);
      TreeMap<Integer, Object> treeMap4 = new TreeMap<Integer, Object>(treeMap3);
      treeMap4.keySet();
      boolean boolean0 = treeMap4.isEmpty();
      treeMap4.size();
      boolean boolean1 = treeMap4.isEmpty();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeMap<Comparable<Object>, String> treeMap0 = new TreeMap<Comparable<Object>, String>();
      // Undeclared exception!
      try { 
        treeMap0.put((Comparable<Object>) null, "[<4Y-:@1G{C73Ck_!P-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>(comparator0);
      Set<Object> set0 = treeMap0.keySet();
      Object object0 = new Object();
      TreeMap<Object, Object> treeMap1 = new TreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        treeMap1.put(object0, set0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-656), 0).when(comparator0).compare(any() , any());
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>(comparator0);
      Integer integer0 = Integer.valueOf(10);
      Integer.min(10, (-1086));
      treeMap0.get(integer0);
      TreeMap<Integer, String> treeMap1 = new TreeMap<Integer, String>();
      TreeMap<Object, Comparable<String>> treeMap2 = new TreeMap<Object, Comparable<String>>();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        treeMap2.put(treeMap0, comparable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weiss.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeMap<Object, Comparable<Integer>> treeMap0 = new TreeMap<Object, Comparable<Integer>>();
      Set<Object> set0 = treeMap0.makeEmptyKeySet();
      // Undeclared exception!
      try { 
        treeMap0.get(set0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weiss.util.TreeSet cannot be cast to java.lang.Comparable
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeMap<Object, Comparable<String>> treeMap0 = new TreeMap<Object, Comparable<String>>();
      Object object0 = new Object();
      treeMap0.keySet();
      treeMap0.getSet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(comparator0).compare(any() , any());
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer(0);
      treeMap1.containsKey(integer0);
      TreeMap<Object, Object> treeMap2 = new TreeMap<Object, Object>();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        treeMap2.remove(object1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>();
      // Undeclared exception!
      try { 
        treeMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.TreeMap$Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeMap<Comparable<Object>, Object> treeMap0 = new TreeMap<Comparable<Object>, Object>();
      treeMap0.clear();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Collection<String> collection0 = treeMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      treeMap0.put(":t{,M]W`-x0A#", ", ");
      String string0 = treeMap0.toString();
      assertEquals("{:t{,M]W`-x0A#=, }", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>(comparator0);
      Integer integer0 = new Integer((-1));
      treeMap0.put("Lj%f/|SGg", integer0);
      Integer integer1 = treeMap0.remove("Lj%f/|SGg");
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeMap<Comparable<Object>, Object> treeMap0 = new TreeMap<Comparable<Object>, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeMap<Object, Object> treeMap1 = new TreeMap<Object, Object>(comparator0);
      Object object0 = new Object();
      treeMap1.put(treeMap0, object0);
      Object object1 = treeMap1.put(treeMap0, treeMap0);
      assertSame(object1, object0);
  }
}
