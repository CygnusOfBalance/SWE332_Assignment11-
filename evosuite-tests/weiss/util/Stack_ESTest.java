/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 14 14:11:15 GMT 2018
 */

package weiss.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weiss.util.Stack;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Stack_ESTest extends Stack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.push(" *LV");
      stack0.push("");
      String string0 = stack0.toString();
      assertEquals(" *LV", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      String string0 = stack0.push("Idz3pgz");
      stack0.push("Idz3pgz");
      String string1 = stack0.peek();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.push((Object) null);
      stack0.push((Object) null);
      Object object0 = stack0.pop();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Stack<Object> stack1 = new Stack<Object>();
      stack1.push(stack0);
      int int0 = stack1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.push((Object) null);
      Object object0 = stack0.peek();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      boolean boolean0 = stack0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.push(integer0);
      boolean boolean0 = stack0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      int int0 = stack0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      String string0 = stack0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        stack0.pop();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        stack0.peek();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weiss.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.clear();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.push("wess.tiliSa");
      String string0 = stack0.pop();
      assertEquals("wess.tiliSa", string0);
  }
}
