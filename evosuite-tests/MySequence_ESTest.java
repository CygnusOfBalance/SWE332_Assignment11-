/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 14 14:01:06 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MySequence_ESTest extends MySequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MySequence<Integer> mySequence0 = new MySequence<Integer>();
      String string0 = mySequence0.toStringAscendingOrder();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      mySequence0.insert("Q]3I@5$b3^");
      int int0 = mySequence0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      mySequence0.insert("I\"]4*NU8q[=0=Y");
      boolean boolean0 = mySequence0.remove("I\"]4*NU8q[=0=Y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      boolean boolean0 = mySequence0.insert("d;}Qe&Pf .Fh(");
      boolean boolean1 = mySequence0.insert("d;}Qe&Pf .Fh(");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      mySequence0.insert("Q]3I@5$b3^");
      int int0 = mySequence0.countNoSmallerThan("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      boolean boolean0 = mySequence0.insert("jp+g+\"tqo%iyv_Q");
      boolean boolean1 = mySequence0.contains("jp+g+\"tqo%iyv_Q");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MySequence<Integer> mySequence0 = new MySequence<Integer>();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      mySequence0.sequence = treeSet0;
      mySequence0.sequence = null;
      // Undeclared exception!
      try { 
        mySequence0.toStringAscendingOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MySequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      mySequence0.sequence = null;
      // Undeclared exception!
      try { 
        mySequence0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MySequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      // Undeclared exception!
      try { 
        mySequence0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      mySequence0.sequence = null;
      // Undeclared exception!
      try { 
        mySequence0.insert("MySequence");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MySequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MySequence<Integer> mySequence0 = new MySequence<Integer>();
      // Undeclared exception!
      try { 
        mySequence0.countNoSmallerThan((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MySequence<Integer> mySequence0 = new MySequence<Integer>();
      // Undeclared exception!
      try { 
        mySequence0.contains((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      mySequence0.insert("Q]3I@5$b3^");
      String string0 = mySequence0.toStringAscendingOrder();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      boolean boolean0 = mySequence0.remove("I\"]4*NU8q[=0=Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      int int0 = mySequence0.countNoSmallerThan("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      boolean boolean0 = mySequence0.contains("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MySequence<String> mySequence0 = new MySequence<String>();
      int int0 = mySequence0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MySequence.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }
}
