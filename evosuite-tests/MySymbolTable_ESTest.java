/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 14 14:02:20 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MySymbolTable_ESTest extends MySymbolTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MySymbolTable<Integer, Object> mySymbolTable0 = new MySymbolTable<Integer, Object>();
      MySymbolTable<Object, Object> mySymbolTable1 = new MySymbolTable<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("f)C(", mySymbolTable0);
      mySymbolTable1.symRec = hashMap0;
      int int0 = mySymbolTable1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MySymbolTable<String, Object> mySymbolTable0 = new MySymbolTable<String, Object>();
      mySymbolTable0.putRecord("H\t.jf", "8+~|$[<ob");
      Object object0 = mySymbolTable0.removeSymbol("H\t.jf");
      assertEquals("8+~|$[<ob", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MySymbolTable<String, Object> mySymbolTable0 = new MySymbolTable<String, Object>();
      mySymbolTable0.putRecord("", "");
      boolean boolean0 = mySymbolTable0.hasSymbol("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MySymbolTable<Object, Integer> mySymbolTable0 = new MySymbolTable<Object, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      mySymbolTable0.symRec = hashMap0;
      Object object0 = new Object();
      Integer integer0 = new Integer((-1477));
      hashMap0.put(object0, integer0);
      Integer integer1 = mySymbolTable0.getRecord(object0);
      assertEquals((-1477), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MySymbolTable<Object, String> mySymbolTable0 = new MySymbolTable<Object, String>();
      mySymbolTable0.symRec = null;
      // Undeclared exception!
      try { 
        mySymbolTable0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MySymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MySymbolTable<Object, Object> mySymbolTable0 = new MySymbolTable<Object, Object>();
      mySymbolTable0.symRec = null;
      // Undeclared exception!
      try { 
        mySymbolTable0.removeSymbol("Yay 2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MySymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MySymbolTable<Object, String> mySymbolTable0 = new MySymbolTable<Object, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      mySymbolTable0.symRec = hashMap0;
      mySymbolTable0.symRec.put(hashMap0, "}Hr'ar0sRI@M");
      // Undeclared exception!
      try { 
        mySymbolTable0.putRecord(hashMap0, "}Hr'ar0sRI@M");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MySymbolTable<String, Integer> mySymbolTable0 = new MySymbolTable<String, Integer>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      mySymbolTable0.symRec = hashMap0;
      mySymbolTable0.symRec = null;
      // Undeclared exception!
      try { 
        mySymbolTable0.putRecord((String) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MySymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MySymbolTable<Integer, String> mySymbolTable0 = new MySymbolTable<Integer, String>();
      mySymbolTable0.symRec = null;
      Integer integer0 = new Integer(112);
      // Undeclared exception!
      try { 
        mySymbolTable0.hasSymbol(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MySymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MySymbolTable<String, Object> mySymbolTable0 = new MySymbolTable<String, Object>();
      Object object0 = mySymbolTable0.getRecord("K?*");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MySymbolTable<String, Object> mySymbolTable0 = new MySymbolTable<String, Object>();
      boolean boolean0 = mySymbolTable0.hasSymbol("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MySymbolTable<Integer, String> mySymbolTable0 = new MySymbolTable<Integer, String>();
      int int0 = mySymbolTable0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MySymbolTable.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MySymbolTable<Object, Object> mySymbolTable0 = new MySymbolTable<Object, Object>();
      Object object0 = mySymbolTable0.removeSymbol("Yay 2");
      assertNull(object0);
  }
}
